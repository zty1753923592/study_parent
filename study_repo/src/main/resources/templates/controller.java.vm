package ${package.Controller};

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.ApiOperation;


#if(${restControllerStyle})
#else
#end
#if(${superControllerClassPackage})
    ${superControllerClassPackage};
#end

/**
 * $!{table.comment} 前端控制器
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@RestController
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
    #else
public class ${table.controllerName} {
    #end

    @Autowired
    private ${table.serviceName} targetService;

    /**
    * 分页查询数据
    */
     @ApiOperation(value = "查询分页数据",notes = "查询分页数据", response = ${entity}.class)
     @PostMapping(value = "/page")
     public R<IPage<${entity}>> page${entity}(@RequestBody Pager<BaseParam<${entity}>> pager){
         return R.ok(targetService.page${entity}(pager), Constants.StatesType.SUCCESS.getCode());
     }

    /**
    * 查询全部数据
    */
    @ApiOperation(value = "查询全部数据",notes = "查询全部数据", response = ${entity}.class)
    @PostMapping(value = "/list")
    public R<List<${entity}>> list${entity}(){
        return R.ok(targetService.list(), Constants.StatesType.SUCCESS.getCode());
    }


    /**
    * 新增数据
    * //TODO 注明所有业务场景
    */
    @ApiOperation(value = "新增数据",notes = "新增数据", response = Boolean.class)
    @PostMapping(value = "/save")
    public R<Boolean> save(@RequestBody ${entity} entity){
        return R.ok(targetService.save(entity.defv()), Constants.StatesType.SUCCESS.getCode());
    }

    /**
    * 更新数据
    * //TODO 注明所有业务场景
    */
    @ApiOperation(value = "更新数据",notes = "更新数据", response = Boolean.class)
    @PostMapping(value = "/update")
    public R<Boolean> update(@RequestBody ${entity} entity){
        return R.ok(targetService.updateById(entity), Constants.StatesType.SUCCESS.getCode());
    }

    /**
    * 删除
    */
    @ApiOperation(value = "删除数据",notes = "删除数据", response = Boolean.class)
    @PostMapping(value = "/del")
    public R<Boolean> delete(@RequestBody List<Long> ids){
        return R.ok(targetService.removeByIds(ids), Constants.StatesType.SUCCESS.getCode());
    }


}

#end